# -*- coding: utf-8 -*-
"""Tipo_PDF_Imagen_texto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10kSTpIJ0TwVeOTRgIFz-bQEhj6l-ds4x
"""

!pip install azure-storage-blob
!pip install requests
!pip install beautifulsoup4 requests

import requests

def check_connectivity(url):
  try:
    response = requests.get(url, timeout=5)  # Set a timeout to avoid waiting too long
    response.raise_for_status()  # Raise an exception for bad status codes
    print(f"{url} is reachable!")
  except requests.exceptions.RequestException as e:
    print(f"{url} is not reachable. Error: {e}")

check_connectivity('http://repository.agrosavia.co')

from azure.storage.blob import BlobServiceClient

# Configuración de Azure Blob Storage
account_url = "https://storageyocampo.blob.core.windows.net"
credential = "sv=2022-11-02&ss=b&srt=sco&sp=rwdlaciytfx&se=2025-01-01T01:34:15Z&st=2024-07-14T17:34:15Z&spr=https,http&sig=bM3SKGXXXXXXXXXXXUXX3D"
#***** se especifica el nombre del contenedor objetivo
# Quitar el comentario si se trata de otro Blob Container obtenido en otra ejecución.
container_name ="cacao20240714183705"

folder_name = "pdf/"


# Crear el cliente de servicio de blob
blob_service_client = BlobServiceClient(account_url=account_url, credential=credential)
container_client = blob_service_client.get_container_client(container_name)

# Listar archivos en la carpeta de video
print(f"Archivos en la ruta {container_name}/{folder_name}:")
blob_list = container_client.list_blobs(name_starts_with=folder_name)
for blob in blob_list:
    print(blob.name)

"""Este script:

1.   Se conecta al contenedor de Azure Blob Storage y lista los archivos PDF en la carpeta especificada.

2.   Descarga cada archivo PDF temporalmente.

3.   Usa la librería PyMuPDF (importada como fitz) para verificar si el PDF contiene texto extraíble.

4.   Crea una tabla con el nombre del archivo, su peso en Kbytes y su tipo.

5.   Guarda los resultados en un archivo CSV temporalmente.

6.   Sube el archivo CSV al Blob Storage en la raíz del contenedor especificado con el nombre resultado_detectar_type_pdf.csv.
"""

!pip install PyMuPDF
!pip install azure-storage-blob PyMuPDF

from azure.storage.blob import BlobServiceClient
import fitz  # PyMuPDF
import pandas as pd

# Configuración de Azure Blob Storage
account_url = "https://storageyocampo.blob.core.windows.net"
credential = "sv=2022-11-02&ss=b&srt=sco&sp=rwdlaciytfx&se=2025-01-01T01:34:15Z&st=2024-07-14T17:34:15Z&spr=https,http&sig=bM3SKbM3SKGXXXXXXXXXXXU3D"
container_name = "cacao20240714183705"
folder_name = "pdf/"

# Crear el cliente de servicio de blob
blob_service_client = BlobServiceClient(account_url=account_url, credential=credential)
container_client = blob_service_client.get_container_client(container_name)

# Listar archivos en la carpeta de PDF
blob_list = container_client.list_blobs(name_starts_with=folder_name)

# Función para verificar si el PDF es de texto extraíble
def is_text_pdf(pdf_path):
    try:
        doc = fitz.open(pdf_path)
        for page_num in range(len(doc)):
            text = doc[page_num].get_text()
            if text.strip():
                return True
        return False
    except Exception as e:
        print(f"Error al procesar {pdf_path}: {e}")
        return False

# Crear una lista para almacenar la información de los archivos
files_data = []

for blob in blob_list:
    blob_client = container_client.get_blob_client(blob.name)

    # Descargar el archivo PDF temporalmente
    download_file_path = "/tmp/" + blob.name.split('/')[-1]
    with open(download_file_path, "wb") as download_file:
        download_file.write(blob_client.download_blob().readall())

    # Verificar si el PDF es de texto extraíble
    is_text = is_text_pdf(download_file_path)

    # Añadir la información del archivo a la lista
    file_info = {
        "nombre_archivo": blob.name,
        "peso_kbytes": blob.size / 1024,
        "tipo": 1 if is_text else 0
    }
    files_data.append(file_info)

    # Mostrar el resultado del análisis
    print(f"Archivo: {file_info['nombre_archivo']}, Peso: {file_info['peso_kbytes']:.2f} KB, Tipo: {'Texto' if file_info['tipo'] == 1 else 'Imagen'}")

# Crear un DataFrame con los resultados
df = pd.DataFrame(files_data)

# Guardar la tabla en un archivo CSV temporalmente
output_csv_path = '/tmp/resultado_detectar_type_pdf.csv'
df.to_csv(output_csv_path, index=False)

# Subir el archivo CSV al Blob Storage
output_blob_name = "resultado_detectar_type_pdf.csv"
blob_client = container_client.get_blob_client(output_blob_name)

with open(output_csv_path, "rb") as data:
    blob_client.upload_blob(data, overwrite=True)

print(f"\nArchivo {output_blob_name} subido a Azure Blob Storage en la ruta / del contenedor {container_name}")

import pandas as pd

# Cargar el archivo CSV
resultado_csv_path = '/tmp/resultado_detectar_type_pdf.csv'  # Reemplaza con la ruta correcta
df_resultado = pd.read_csv(resultado_csv_path)

# Contar la cantidad de PDFs de texto y de imagen
conteo_tipos = df_resultado['tipo'].value_counts()

# Obtener la cantidad de PDFs de texto y de imagen
cantidad_texto = conteo_tipos.get(1, 0)
cantidad_imagen = conteo_tipos.get(0, 0)

print(f"Cantidad de PDFs de texto: {cantidad_texto}")
print(f"Cantidad de PDFs de imagen: {cantidad_imagen}")